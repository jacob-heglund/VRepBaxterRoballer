import numpy as np
import scipy as sp
from numpy import linalg as nl
from scipy import linalg as sl
import math
from sympy.matrices import zeros, Matrix, eye
import sympy.matrices as symm
import sympy as sym
from sympy import Symbol
from math import factorial


    

def skew(x):
    return np.array([[0, -x[2], x[1]],
                     [x[2], 0, -x[0]],
                     [-x[1], x[0], 0]])
    
def dskew(x):
    return np.array[[x[2][1]],[x[0][2]],[x[1][0]]]
    
    
def vskew(x):
    return np.array([[0,-x[2],x[1],x[3]],
                     [x[2],0,-x[0],x[4]],
                     [-x[1],x[0],0,x[5]],
                     [0,0,0,0]])
    
    
    
def dvskew(x):
    return np.array([[x[2][1]],
                    [x[0][2]],
                    [x[1][0]],
                    [x[0][3]],
                    [x[1][3]],
                    [x[2][3]]])
    
    
def Jmaker(theta,s):
    joints = s.shape[1];
    temp = np.zeros((6,joints))
    for i in range(joints):
        if(i == 0):
            temp[:,0] = s[:,0].reshape((6))
            continue 
        cur = sl.expm(vskew(s[:,0])*theta[0])
        for y in range(1,i):
            cur = cur.dot(sl.expm(vskew(s[:,y])*theta[y]))
        temp[:,i] = admaker(cur).dot(s[:,i])
    return temp


def exp(s,t):
    return sl.expm(vskew(s)*t)
    
            
            
        
    
def admaker(x):
    temp = np.zeros((6,6))
    temp[:3,:3] = np.copy(x[:3,:3])
    temp[3:,:3] = np.dot(skew(x[:3,3]), x[:3,:3])
    temp[3:,3:] = np.copy(x[:3,:3])
    return temp


def rad(x):
    return math.radians(x)

def sind(x):
    return np.sin(rad(x))

def cosd(x):
    return np.cos(rad(x))

def TtoM(theta, s,M):
    T = np.identity(4)
    for i in range(theta.size):
        T = T.dot(sl.expm(vskew(s[:,i])*theta[i,0]))
    return T.dot(M)


def td(J, V):
    return nl.inv(np.transpose(J)@J+.1*np.identity(J.shape[1]))@np.transpose(J)@V


#5.1.1
# =============================================================================
# p_1 = np.array([[4.2935], [-2.3707], [0.6891]])
# p_2 = np.array([[4.4369], [-0.3092], [-0.9037]])
# r_1 = 0.9627
# r_2 = 1.7562
# 
# dist = np.sqrt((p_1[0]-p_2[0])**2 + (p_1[1]-p_2[1])**2 + (p_1[2]-p_2[2])**2)
# if dist < r_1 + r_2:
#     print("true")
# else:
#     print("false")
# =============================================================================
 

#5.1.2   
# =============================================================================
# p = np.array([[-2.4618, -2.7539, -0.4778, 1.8788, -0.8879, -2.8568, -1.7276, 3.1641,  4.4742, 3.0727, 3.0255, 4.8087, 1.1001, 2.7398, -1.3923, 3.3809, 4.4706,  2.4759, 4.6150], [0.6579, 1.0170, 0.1447, -4.5824, 2.4471, -1.1121, -4.5077, 4.3706,  -1.8726, -2.6840, 2.0840, -4.4398, 2.2920, -3.2560, -0.9455, 3.4239,  -1.0217, -4.8318, -3.9499], [4.8702, 4.0578, 3.0324, 4.8996, -4.6204, 1.1944, -4.9216, -4.7917,  -4.9137, 1.3460, 0.8760, -0.1623, -0.7744, 2.2349, 3.4466, -1.3811,  -2.0198, 0.7614, -2.6530]])
# r = np.array([[1.8665, 1.7621, 1.2180, 1.7200, 2.8637, 2.6827, 2.5885, 1.0225, 1.6915,  1.5538, 2.0180, 2.7764, 2.9853, 1.0205, 1.5640, 2.8953, 2.9100, 2.5727,  1.1423]])
# q = np.array([[0.0680], [-2.0432], [1.5771]])
# s = 2.0304
# 
# answer = np.zeros((1,r[0].size))
# for i in range(r[0].size):
#     dist = np.sqrt((p[0][i]-q[0])**2 + (p[1][i]-q[1])**2 + (p[2][i]-q[2])**2)
#     if dist < s + r[0][i]:
#         answer[0][i] = 1
# print(repr(answer))
# =============================================================================

#5.1.3
# =============================================================================
# S = np.array([[ 0,  0, -1,  0,  0, -1], [ 0, -1,  0,  0,  1,  0], [ 0,  0,  0,  0,  0,  0], [ 0,  0,  0, -1,  2,  0], [ 0,  0,  0,  0,  0,  2], [-1,  0, -4,  0,  0,  0]])
# M = np.array([[-1,  0,  0,  0], [ 0,  0, -1,  0], [ 0, -1,  0, -4], [ 0,  0,  0,  1]])
# theta = np.array([[-3.09209717], [2.11978287], [-2.28201646], [2.22456422], [0.41877656], [-1.83649422]])
# 
# coords = np.array([[0,0,0,0,0,0],
#                    [-2,-2,-4,-4,-2,0],
#                    [2,0,0,-2,-2,-2]])
# 
# answer = np.zeros((3,8))
# answer[0][1] = coords[0][0]
# answer[1][1] = coords[1][0]
# answer[2][1] = coords[2][0]
# 
# for i in range(S[0].size):
#     startM = np.copy(M)
#     if(i != S[0].size-1):
#         startM[0][3] = coords[0][i+1]
#         startM[1][3] = coords[1][i+1]
#         startM[2][3] = coords[2][i+1]
#     Mt = TtoM(theta[:i+1,0].reshape((i+1,1)), S[:,:i+1], startM)
#     
#     answer[0][i+2] = Mt[0][3]
#     answer[1][i+2] = Mt[1][3]
#     answer[2][i+2] = Mt[2][3]
#     
# print(repr(answer))
# =============================================================================
    
#5.1.4
# =============================================================================
# S = np.array([[ 0, -1,  0, -1,  0,  0], [ 0,  0,  0,  0,  0,  0], [ 0,  0,  1,  0,  0,  0], [ 0,  0,  4,  0,  0,  0], [ 1,  2,  0, -2,  1,  0], [ 0,  2,  0,  4,  0, -1]])
# M = np.array([[ 1,  0,  0,  0], [ 0, -1,  0,  6], [ 0,  0, -1,  0], [ 0,  0,  0,  1]])
# theta = np.array([[-1.29302249], [-1.23530881], [-0.13052305], [1.46066513], [-1.39569408], [0.03145416]])
# r = 0.90000000
# 
# coords = np.array([[0,0,0,0,0,0],[0,2,4,4,4,6],[-2,-2,-2,2,4,2]])
# 
# centers = np.zeros((3,8))
# centers[0][1] = coords[0][0]
# centers[1][1] = coords[1][0]
# centers[2][1] = coords[2][0]
# 
# for i in range(S[0].size):
#     startM = np.copy(M)
#     if(i != S[0].size-1):
#         startM[0][3] = coords[0][i+1]
#         startM[1][3] = coords[1][i+1]
#         startM[2][3] = coords[2][i+1]
#     Mt = TtoM(theta[:i+1,0].reshape((i+1,1)), S[:,:i+1], startM)
#     
#     centers[0][i+2] = Mt[0][3]
#     centers[1][i+2] = Mt[1][3]
#     centers[2][i+2] = Mt[2][3]
#     
# for i in range(S[0].size+2):
#     for y in range(S[0].size+2):
#         if(i == y):
#             continue
#         dist = np.sqrt((centers[0][i] - centers[0][y])**2 + (centers[1][i] - centers[1][y])**2 + (centers[2][i] - centers[2][y])**2)
#         if dist < 2*r:
#             print("true")
#             print(dist)
#             print(2*r)
#             print(i)
#             print(y)
#             break
# print("done")
# =============================================================================
    

#5.1.5
# =============================================================================
# S = np.array([[ 0,  0,  0,  0,  0,  0,  0,  0], [ 1,  0,  1,  0,  0,  0,  0,  0], [ 0,  0,  0,  0,  0,  0,  0, -1], [ 0,  0,  0,  0,  0, -1,  0,  4], [ 0,  1,  0, -1,  0,  0, -1,  0], [ 2,  0,  4,  0, -1,  0,  0,  0]])
# M = np.array([[ 0, -1,  0, -2], [ 1,  0,  0, -4], [ 0,  0,  1,  0], [ 0,  0,  0,  1]])
# theta = np.array([[-0.20, 2.42, 0.27, -2.92, -3.02, -2.29, 1.28, 2.93, -2.01, 0.02, 1.63,  -2.81, 1.57, -0.64, -1.39, 0.96, -2.24, -2.09, 3.02, -1.11], [2.04, 2.72, 2.69, 1.79, -2.46, 0.07, 1.67, 2.32, 2.79, 1.81, -3.11,  1.95, 2.96, -2.25, 0.05, -0.51, -3.14, -2.31, -2.94, 1.33], [-1.68, 2.17, 0.35, 2.76, -1.32, 2.19, -0.80, 2.83, 2.89, -3.01, -2.36,  1.66, -2.92, 2.45, 2.96, 0.03, -2.75, -1.13, 1.63, -2.36], [1.15, -0.95, 0.62, -2.93, -0.62, -1.27, -2.97, -2.95, 1.56, -2.00,  -1.79, 2.26, 0.23, -1.86, -0.09, -1.70, -0.90, -0.30, 2.48, -2.52], [-2.08, -1.69, -1.95, -0.11, -1.41, -0.46, -1.00, 2.67, -1.65, 1.46,  0.61, 0.01, 1.97, -2.80, 1.85, -1.52, 1.72, 0.73, 3.12, 0.87], [1.47, 0.07, -2.50, -0.83, 0.69, 1.99, 3.09, -2.14, 0.94, -0.66, 1.10,  -2.62, 2.43, 1.09, 3.11, -1.85, -0.99, 0.00, 2.90, 1.78], [-1.81, -1.66, 1.61, 0.97, 0.27, 2.47, -2.37, 0.34, 0.77, -0.76, -1.48,  2.43, 0.21, -0.70, 2.67, -2.72, -0.58, 2.57, 0.39, 0.15], [2.74, 2.37, -1.83, -0.05, -1.16, -0.72, -1.14, -2.85, 0.91, 3.01, 1.18,  1.01, -0.91, 3.01, -2.63, -0.80, -2.44, -0.19, 2.99, 2.55]])
# r = 0.90000000
# 
# 
# coords = np.array([[2,4,4,6,6,4,2,0],
#                    [0,0,2,2,-2, -2,-2,-4],
#                    [0,0,0,0,0,0,0,0]])
# 
# centers = np.zeros((3,S[0].size+2))
# centers[0][1] = coords[0][0]
# centers[1][1] = coords[1][0]
# centers[2][1] = coords[2][0]
# 
# answer = np.zeros((1,theta[0].size))
# 
# for t in range(theta[0].size):
#     for i in range(S[0].size):
#         startM = np.copy(M)
#         if(i != S[0].size-1):
#             startM[0][3] = coords[0][i+1]
#             startM[1][3] = coords[1][i+1]
#             startM[2][3] = coords[2][i+1]
#         Mt = TtoM(theta[:i+1,t].reshape((i+1,1)), S[:,:i+1], startM)
#         
#         centers[0][i+2] = Mt[0][3]
#         centers[1][i+2] = Mt[1][3]
#         centers[2][i+2] = Mt[2][3] 
#     for l in range(S[0].size+1):
#         for y in range(l+1,S[0].size+2):
#             dist = nl.norm(centers[:,l] - centers[:,y])
#             #dist = np.sqrt((centers[0][l] - centers[0][y])**2 + (centers[1][l] - centers[1][y])**2 + (centers[2][l] - centers[2][y])**2)
#             if dist < 2*r:
#                 answer[0][t] = 1
#                 
# print(repr(answer))
# =============================================================================
